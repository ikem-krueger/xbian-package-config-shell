#!/bin/bash

#
#Copyright 2012 - 2013 Hexagon & CurlyMo & mk01 <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

setAuto() {
    ni=$1
    case $1 in 
        wlan?)
            echo "auto lo" > /etc/network/interfaces.new
            grep -vi ^auto /etc/network/interfaces >> /etc/network/interfaces.new
            mv /etc/network/interfaces.new /etc/network/interfaces
            ;;
        eth?)
            echo "auto $1 lo" > /etc/network/interfaces.new
            grep -vi ^auto /etc/network/interfaces >> /etc/network/interfaces.new
            mv /etc/network/interfaces.new /etc/network/interfaces
            ;;
        lo)
            ;;
    esac

    return 0
}

setInterfaceDisableFn() {
    case $1 in
        eth?)
            setAuto wlan0
            ;;
        wlan?)
            sed -i "s%^allow-hotplug.*$1%#allow-hotplug $1%" /etc/network/interfaces
            ;;
        *)
            ;;
    esac
    ifdown $1 >&/dev/null; ifdown --force $1 >&/dev/null
    return 1
}

# Set wlan credentials
# Arguments
#  $1 Interface name
#  $2 Protection (WPA|WEP|Open)
#  $3 ESSID
#  $4 WLANKEY (Only needed for WPA and WEP)
# Return
#  1: Success
#  0: Failure
# Error codes
#  -10: Invalid wireless protection
setInterfaceWlanCredentials() {

	# Check that supplied interface is valid
    isValidInterfaceFn "$1"
	if [ $? -eq 1 ]; then

		# Create buffer for holding configuration
		WLANBUFFER=""
		n=$(echo "$3" | sed 's%\\%\\\\%g' )
		k=$(echo "$4" | sed 's%\\%\\\\%g' )
		case $2 in
			"WEP")
				WLANBUFFER+="\nwireless-essid $n\nnwireless-key $k"
			;;
			"WPA")
				WLANBUFFER+="\nwpa-ssid $n\nwpa-psk $k"
			;;
			"Open")
				WLANBUFFER+="\nwireless-mode managed\nwireless-essid $n"
			;;
			*)
				return 2
			;;
		esac

	        if [ $(grep -c "^iface $1" /etc/network/interfaces) -gt 0 ]; then

			# Interface already present, store it + any subsequent ifaces in an buffer
			IFACEBUFFER=$(grep -A100 "^iface $1" /etc/network/interfaces | sed '1d');

			# Extract DHCP or Static
			MODE=$(sed -ne "s/\(iface $1 \)\([a-z]\{1,\}\)[\ ]\([a-z]\{1,\}\)/\3/p" /etc/network/interfaces);

			# Remove what's now in the buffer from the file
			sed -i "/^iface $1/,+100d" /etc/network/interfaces

			# Extract subsequent ifaces to a separate buffer
			MORE=$(echo -e "$IFACEBUFFER" | sed -n '/\(allow-hotplug.*\|^iface.*\)/,$p')

			# Get a cleaned verson of current clause
			ME=$(echo -e "$IFACEBUFFER" | sed '/\(allow-hotplug.*\|^iface.*\)/,$d' | sed '/\(^wireless.*\|^wpa.*\)/d')

			# Re-add current interface withouth previous cruft
	                echo -e "iface $1 inet $MODE" >> /etc/network/interfaces
			echo -e "$WLANBUFFER" >> /etc/network/interfaces
			echo -e "$ME\n" >> /etc/network/interfaces

			# Re-add subsequent interfaces
			echo -e "$MORE" >> /etc/network/interfaces

		else
			# Interface not present, add it to the end
			echo -e "iface $1 inet dhcp" >> /etc/network/interfaces
			echo -e "$WLANBUFFER\n" >> /etc/network/interfaces
		fi
		return 1;
	else
		return 3;
	fi
}

# Sets an interface to use dhcp
# Arguments
#  $1 Interface name
setInterfaceDhcpFn() {
        isValidInterfaceFn "$1"
	if [ $? -eq 1 ]; then
	        if [ $(grep -c "^iface $1" /etc/network/interfaces) -gt 0 ]; then

			# Interface already present, store it + any subsequent ifaces in an buffer
			IFACEBUFFER=$(grep -A100 "^iface $1" /etc/network/interfaces | sed '1d');

			# Remove what's now in the buffer from the file
			sed -i "/^iface $1/,+100d" /etc/network/interfaces

			# Extract subsequent ifaces to a separate buffer
			MORE=$(echo -e "$IFACEBUFFER" | sed -n '/\(allow-hotplug.*\|^iface.*\)/,$p')

			# Get a cleaned verson of current clause
			ME=$(echo -e "$IFACEBUFFER" | sed '/\(allow-hotplug.*\|^iface.*\)/,$d' | sed '/\(^address.*\|^netmask.*\|^gateway.*\)/d')

			# Re-add current interface withouth previous cruft
	                echo -e "iface $1 inet dhcp" >> /etc/network/interfaces
			echo -e "$ME\n" >> /etc/network/interfaces

			# Re-add subsequent interfaces
			echo -e "$MORE" >> /etc/network/interfaces

		else
			# Interface not present, add it to the end
			case $1 in wlan?) echo "allow-hotplug $1" >> /etc/network/interfaces; ;; esac
			sudo echo -e "iface $1 inet dhcp\n" >> /etc/network/interfaces

		fi
		sed -i "s%#allow-hotplug.*$1%allow-hotplug $1%" /etc/network/interfaces
		return 1;
	else
		return 0;
	fi
}

# Validate a given ip address
# Arguments
#  $1 IP
#  $2 Netmask
# Return
#  1: Valid
#  0: Invalid
function checkValidIpNumberFn() {
	[ "$(ipcalc $1/$2|grep Address: | awk '{print $2}')" = "$1" ] || return 0
	return 1;
}

function checkIp() {
    ipcalc $1 | grep -q "INVALID ADDRESS" || return 1
    return 0
}

function checkValidGwFn() {
    checkIp "$3" && return 0
    lo=$(echo $(ipcalc -b $1/$2|grep 'Network\|Broadcast' |awk '{print $2}' | awk -F'/' '{print $1}') | awk '{print $1}')
    hi=$(echo $(ipcalc -b $1/$2|grep 'Network\|Broadcast' |awk '{print $2}' | awk -F'/' '{print $1}') | awk '{print $2}')
    [[ "$lo" < "$3" ]] && [[ "$3" < "$hi" ]] || return 0
    return 1 
}


# Validate a given netmask
# Arguments
#  $1 IP
#  $2 Netmask
# Return
#  1: Valid
#  0: Invalid
function checkValidIpNetmaskFn() {
	[ "$(ipcalc $1/$2|grep Netmask: | awk '{print $2}')" = "$2" ] || return 0
	return 1
}

# Sets an interface to use static ip
# Arguments
#  $1 Interface name
#  $2 IP
#  $3 Netmask
#  $4 Gateway
#  $5 DNS1 (optional)
#  $6 DNS2 (optional)
# Returns
#  0: Failed
#  1: Succeede
# Error codes
#  -3: Invalid interface
#  -6: Invalid IP
#  -7: Invalid netmask
#  -8: Invalid Gateway
#  -9: Invalid DNS
setInterfaceStaticFn() {
	isValidInterfaceFn "$1"
	if [ $? -eq 1 ]; then

		# Configuration buffer
		BUFFERIFACES=""
		BUFFERRESOLV=""
		# Validate input & preparation of configuration buffers
		checkValidIpNumberFn "$2" "$3"
		if [ ! $? -eq 1 ]; then
			return 6;
		else
			BUFFERIFACES+="address $2"
		fi
		checkValidIpNetmaskFn "$2" "$3"
		if [ ! $? -eq 1 ]; then
			return 7;
		else
			BUFFERIFACES+="\nnetmask $3"
		fi
		if [ $# -gt 3 ] && [ -n "$4" ]; then
		    checkValidGwFn "$2" "$3" "$4"
		    if [ ! $? -eq 1 ]; then
			return 8;
		    else
			BUFFERIFACES+="\ngateway $4"
		    fi
		fi
		if [ $# -gt 4 ] && [ ! -z "$5" ]; then
			checkIp "$5"
			if [ ! $? -eq 1 ]; then
				return 9;
			else
				BUFFERRESOLV+="nameserver $5"
			fi
		fi
		if [ $# -gt 5 ] && [ ! -z "$6" ]; then
			checkIp "$6"
			if [ ! $? -eq 1 ]; then
				return 9;
			else
				BUFFERRESOLV+="\nnameserver $6"
			fi
		fi
		# Process /etc/network/interfaces
	        if [ $(grep -c "^iface $1" /etc/network/interfaces) -gt 0 ]; then

			# Interface already present, store it + any subsequent ifaces in an buffer
			IFACETMP=$(grep -A100 "^iface $1" /etc/network/interfaces | sed '1d');

			# Remove what's now in the buffer from the file
			sed -i "/^iface $1/,+100d" /etc/network/interfaces

			# Extract subsequent ifaces to a separate buffer
			MORE=$(echo -e "$IFACETMP" | sed -n '/\(allow-hotplug.*\|^iface.*\)/,$p')
			ME=$(echo -e "$IFACETMP" | sed '/\(allow-hotplug.*\|^iface.*\)/,$d' | sed '/\(.*address.*\|.*netmask.*\|.*gateway.*\)/d')

			# Re-add current interface withouth previous cruft
	                echo -e "iface $1 inet static" >> /etc/network/interfaces
			echo -e "$ME" >> /etc/network/interfaces
			echo -e "$BUFFERIFACES\n" >> /etc/network/interfaces

			# Re-add subsequent interfaces
			echo -e "$MORE" >> /etc/network/interfaces

		else
			# Interface not present, add it to the end
			case $1 in wlan?) echo "allow-hotplug $1" >> /etc/network/interfaces; ;; esac
			sudo echo -e "iface $1 inet static" >> /etc/network/interfaces
			echo -e "$BUFFERIFACES\n" >> /etc/network/interfaces

		fi
		sed -i "s%#allow-hotplug.*$1%allow-hotplug $1%" /etc/network/interfaces

		# Process /etc/resolv.conf
		sed -i "/nameserver/d" /etc/resolv.conf
		echo -e "$BUFFERRESOLV" >> /etc/resolv.conf
		return 1;
	else
		return 0;
	fi
}

# List all available network interfaces
# Echoes @return
#  @1: Available interfaces
#  @2: Error code
# Returns
#  1: Success
#  0: Error
function listNetworkInterfacesFn() {
	IFACES=$(ip addr | grep state | grep -vw 'lo\|dummy0' | cut -f 2 -d":" | sed 's/ //g');
	if [ ! -z "$IFACES" ]; then
		echo -e "$IFACES"
		return 1
	else
		return 0
	fi
}

# Check if a given string is a valid interface name
# Parameters
#  $1: Interface name
# Returns
#  1: Valid
#  0: Invalid
function isValidInterfaceFn() {
	INTERFACE=$(listNetworkInterfacesFn | grep "$1")
	if [ ! -z "$INTERFACE" ]; then
		return 1;
	else
		return 0;
	fi
}

# Reads various netowrk configuration options from related files
# Arguments
#   $1 Interface
# Return
#   1: Success
#   0: Failure
# Echoes
#   @1: Textual table
#       -----------------------
#       mode dhcp|static|manual
#	state UP|DOWN
#       ip X.X.X.X
#       netmask X.X.X:X
#       gateway X.X.X.X
#       nameserver1 X.X.X.X
#       namserver2 X.X.X.X
#	protection WEP|WPA|open (only for wlan interfaces)
#	SSID XXXX (only for wlan interfaces)
#	WLANKEY XXXX (only for wlan interfaces)
#   @0: Error code
# Error codes
#   -4: Invalid interface
function readNetworkConfigurationFn() {
	isValidInterfaceFn "$1"
	if [ $? -eq 1 ]; then
		# Read network configuration from /etc/network/interfaces
		TFILEIFACES=$(cat /etc/network/interfaces)

		# Place everything after matching iface in a variable
		CONTENT=$(echo -e "$TFILEIFACES" | grep -A20 "^iface $1 inet" | sed '1d');

		# Delete (possible) subsequent ifaces from variable
		CONTENT=$(echo -e "$CONTENT" | sed '/iface/,$d');

		# Extract DHCP or Static
		MODE=$(echo -e "$TFILEIFACES" | sed -ne "s/\(iface $1 \)\([a-z]\{1,\}\)[\ ]\([a-z]\{1,\}\)/\3/p");
		[ -z "$MODE" ] && MODE=manual
		CIP=$(ip a show $1 | sed -n -e 's/:127\.0\.0\.1 //g' -e 's/ *inet \([0-9.]\+\).*/\1/gp');
		CSM=$(ip a show $1 | grep inet | awk '{print $4}');
		CGW=$(ip route show | grep -m1 'default\|0.0.0.0' | awk '{print $3}');

		# Extract wlan configuration
		PROTECTION=""
		MODEOPEN=$(echo -e "$CONTENT" | grep ^wireless-mode)
		MODEWPA=$(echo -e "$CONTENT" | grep ^wpa-)
		MODEWEP=$(echo -e "$CONTENT" | grep ^wireless-essid)
		if [ ! -z "$MODEOPEN" ]; then
			PROTECTION="open"
		elif [ ! -z "$MODEWPA" ]; then
			PROTECTION="WPA"
		elif [ ! -z "$MODEWEP" ]; then
			PROTECTION="WEP"
		fi

		[ -z "$PROTECTION" ] && [[ $1 =~ wlan ]] && PROTECTION=open

		# Extract wlan credentials
		SSID=""
		WLANKEY=""
		if [ ! -z "$PROTECTION" ]; then
			if [ "$PROTECTION" == "WEP" ]; then
				SSID=$(echo -e "$CONTENT" | sed -ne 's/wireless-essid[\ ]\(.*\)/\1/p')
				WLANKEY=$(echo -e "$CONTENT" | sed -ne 's/wireless-key[\ ]\(.*\)/\1/p')
			elif [ "$PROTECTION" == "WPA" ]; then
				SSID=$(echo -e "$CONTENT" | sed -ne 's/wpa-ssid[\ ]\(.*\)/\1/p')
				WLANKEY=$(echo -e "$CONTENT" | sed -ne 's/wpa-psk[\ ]\(.*\)/\1/p')				
			elif [ "$PROTECTION" == "open" ]; then
				SSID=$(echo -e "$CONTENT" | sed -ne 's/wireless-essid[\ ]\(.*\)/\1/p')
			fi
		fi

		# Get current state
		STATE=$(ip addr | grep state | grep "$1" | sed 's/.*state/state/g' | cut -f 2 -d" ")

		echo "mode $MODE"
		echo "state $STATE"
		echo "ip $CIP"
		echo "netmask $CSM"
		echo "gateway $CGW"
		DNS=(); c=1

	        # Read nameservers from /etc/resolv.conf
		while read  a b; do
		    [[ $a =~ nameserver ]] || continue
		    [ -z "$b" ] && b=$(echo $a | awk '{print $2}')
		    DNS+=("nameserver$c $b"); c=$((c+1))
		done < <(echo -e "$(grep -w nameserver  /etc/resolv.conf)")
		printf "%s\n" "${DNS[@]}"

		if [ ! -z "$PROTECTION" ]; then
			echo "protection $PROTECTION"
			if [ "$GUIMODE" -eq 1 ]; then
				echo "ssid $SSID"
				echo "key $WLANKEY"
			else
				echo "ssid $(echo $SSID | base64)"
				echo "key $(echo $WLANKEY | base64)"
			fi
		fi
		return 1;
	else
		return 0;
	fi
}


# Validate a given netmask
# Arguments
#  $1 Netmask
# Return
#  1: Valid
#  0: Invalid
function scanWLANNetworksFn() {
	ip link set $1 up >/dev/null 2>&1
	IFS=$'\n'
	OUTPUT=($(iwlist $1 scan));

	WNETWORKS=();
	WLAN=();
	NUMBERS=();
	X=-1;
	READ=0;
	for LINE in ${OUTPUT[@]}; do
		if [[ $LINE =~ "Cell" ]]; then
			if [ $READ -eq 1 ]; then
				if [ -z ${WLAN[1]} ]; then
					WLAN[1]="Open";
				fi
				if [ "${WLAN[2]}" == "on" ] && [ "${WLAN[1]}" == "Open" ]; then
					WLAN[1]="WEP";
				fi
				if [ ${#WLAN[0]} -gt 2 ]; then
					X=$(($X+1));
					WNETWORKS[$X]="${WLAN[0]},${WLAN[1]},${WLAN[2]},${WLAN[3]}";
				fi
				WLAN=();
				WLAN[1]="Open";
			fi
			READ=1;
		fi
		if [[ $LINE =~ "ESSID" ]]; then
			WLAN[0]=$(echo $LINE | cut -f2 -d":");
		fi
		if [[ $LINE =~ "WPA" ]]; then
			WLAN[1]="WPA"
		fi
		if [[ $LINE =~ "Encryption key" ]]; then
			WLAN[2]=$(echo $LINE | cut -f2 -d":");
		fi
		if [[ $LINE =~ "Signal level" ]]; then
#			WLAN[3]=$(echo $LINE | awk -F"Quality=" '{print $2}' | cut -d'/' -f1);
			WLAN[3]=$(echo $LINE | awk -F"Quality=" '{print $2}' | cut -d' ' -f1);
			[ "${WLAN[3]}" = '' ] && WLAN[3]=$(echo $LINE | awk -F"Signal level=" '{print $2}');
			[ "${WLAN[3]}" = '' ] && WLAN[3]=$(echo $LINE | awk -F"Signal level:" '{print $2}' | cut -d' ' -f1);
			[ "${WLAN[3]}" = '' ] && WLAN[3]=0
			WLAN[3]=$((100*${WLAN[3]}))
                fi
	done;
	X=$(($X+1));
	if [ ${#WLAN[0]} -gt 2 ]; then
		WNETWORKS[$X]="${WLAN[0]},${WLAN[1]},${WLAN[2]},${WLAN[3]}";
	fi
	IFS=",";
	SWITCH=1;
	while [ $SWITCH -eq 1 ]; do
		SWITCH=0;
		for((C=0;C<=$X;C++)); do
			VALUES=(${WNETWORKS[$C]});
			VALUES1=(${WNETWORKS[$(($C+1))]});
			if [[ "${VALUES1[3]}" =~ [0-9]{1,3} ]] && [[ "${VALUES[3]}" =~ [0-9]{1,3} ]]; then
				if [ ${VALUES[3]} -lt ${VALUES1[3]} ]; then
					TEMP=${WNETWORKS[$C]};
					WNETWORKS[$C]=${WNETWORKS[$(($C+1))]};
					WNETWORKS[$(($C+1))]=$TEMP;
					SWITCH=1;
				fi
			fi
		done;
	done;
	IFS=$ORIGINALIFS;
}

# Restart a wlan adapter
# Arguments
#  $1 Interface name
# Return
#  @: Process id of the ifup process
#  0: Process ifup not running
function restartWLANAdapterFn() {
	ifdown $1 >&/dev/null; ifdown --force $1 >&/dev/null
	pkill wpa_supplicant > /dev/null 2>&1;pkill wpa_cli > /dev/null 2>&1
	nohup ifup $1 2>/tmp/wlanstatus 1>/dev/null  &
	PROCESSID=$!; echo $PROCESSID > /tmp/wlanstatus.pid
	return $PROCESSID
}

# Restart a lan adapter
# Arguments
#  $1 Interface name
# Return
#  @: Process id of the ifup process
#  0: Process ifup not running
function restartLANAdapterFn() {
        [ -n "$1" ] && ifc=$1 || ifc=eth0
	ifdown $ifc >&/dev/null
	ifdown --force $ifc >&/dev/null 
	ifup $ifc >&/dev/null
}

# Gets the status of the wlan restart
# Return
#  0: The wlan status file does not exist
#  1: Connecting to wlan network
#  2: Successfully connected to network
#  3: Failed to connected to network
function getWLANConnectStatusFn() {
	STATUS=0;
	if [ -f /tmp/wlanstatus ]; then
		STATUS=1
		if grep -qw "bound" /tmp/wlanstatus; then
			STATUS=2;
		elif grep -qw 'DHCPOFFERS\|Terminated\|RTNETLINK' /tmp/wlanstatus; then
			STATUS=3;
		fi
	fi
	
	return $STATUS;
}

function clearWLANStatusFn() {
	if [ -f /tmp/wlanstatus ]; then
		rm /tmp/wlanstatus*
	fi
}

function getAdapterTypeFn() {
	if [ ! -d "/sys/class/net/$1/wireless" ] && [ -d "/sys/class/net/$1" ]; then
		return 0;
	else
		return 1;
	fi
}	
