#!/bin/bash

#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>

# The arguments this module accepts
ARGUMENTS=(start status  imgplan imgdest imgtype getpart dodaily doweekly domonthly);

#|------------------------------------|
#|          Include files             |
#|------------------------------------|

source $BASEPATH/modules/xbiancopy/functions
if [ $GUIMODE -eq 1 ]; then
	source $BASEPATH/modules/xbiancopy/dialogs;
fi

#|------------------------------------|
#|          Global variables          |
#|------------------------------------|

#|------------------------------------|
#|           Main program             |
#|------------------------------------|

# Executes the GUI version of this module
function showGUIFn() {
        tm=$(mktemp -d)
        cleanup () {
            mountpoint -q $tm && umount $tm 2>/dev/null; rmdir $tm 2>/dev/null
        }
        trap 'cd /; cleanup' RETURN EXIT TERM

        showConfigDialog
        if [ $? -eq 0 ]; then
            opt_img=''
            IFS=$'\n';
            DATA=($(echo -e "$RETURN"));
            IFS=$ORIGINALIFS;
            DEST=${DATA[1]}; 

            if echo "$DEST" | grep -q ^'nfs:'; then
                DEST=${DEST##'nfs:'}
                mount $DEST $tm && { rm -fr $tm/root $tm/xbian || :; } && touch $tm/root && touch $tm/xbian && chown xbian:xbian $tm/xbian && \
                    [ "$(stat -c %U $tm/root)" = root -a "$(stat -c %U $tm/xbian)" = xbian ] || \
                        { showNFSerror; sleep 5; umount -l $tm 2>/dev/null; rmdir $tm 2>/dev/null; return 1; }

                tt=nfs
            elif echo "$DEST" | grep -q ^'f2fs:'; then
                DEST=${DEST##'f2fs:'}
                tt=f2fs
            elif echo "$DEST" | grep -q ^'ext4:'; then
                DEST=${DEST##'ext4:'}
                tt=ext4
            else 
                echo "$DEST" | grep -q ^'file:' && opt_img='--img'
                DEST=${DEST##'file:'}
                tt=btrfs
            fi
            # check for block device
            if [ -z "$opt_img" -a "$tt" != nfs ]; then
                { [ -b $DEST ] && echo $DEST | grep -q ".*[0-9]$"; } || { showWrongBlockDev; sleep 5; return 1; }
                if [ "$tt" != btrfs ]; then
                     { ! mountpoint -q $DEST || umount $DEST; } && mkfs.$tt $DEST >/dev/null 2>&1 && mount -t $tt $DEST $tm || { showUmountFormatError; sleep 5; return 1; }
                fi
            fi

            # copy data
            case $tt in
                btrfs)
                    btrfs-auto-snapshot xbiancopy $opt_img  ${DATA[0]} "$DEST"
                    ;;
                nfs|f2fs|ext4)
                    rm -fr $tm/* && mkdir $tm/home && mkdir -p $tm/lib/modules && mkdir -p $tm/home/xbian/.xbmc
                    cd $tm/
                    ( tar c --one-file-system /home  | pv -n -s $(du -sbx  /home| awk '{print $1}')| tar x -v >/run/f.txt) 2>&1 | while read a; do printf "XXX\n$a\n$(printf "%-.55s" $(tail -1 /run/f.txt))\nXXX\n"; done | dialog --gauge 'Progress' 8 60
                    ( tar c --one-file-system /home/xbian/.xbmc  | pv -n -s $(du -sbx  /home/xbian/.xbmc| awk '{print $1}')| tar x -v >/run/f.txt) 2>&1 | while read a; do printf "XXX\n$a\n$(printf "%-.55s" $(tail -1 /run/f.txt))\nXXX\n"; done | dialog --gauge 'Progress' 8 60
                    ( tar c --one-file-system /lib/modules  | pv -n -s $(du -sbx  /lib/modules| awk '{print $1}')| tar x -v >/run/f.txt) 2>&1 | while read a; do printf "XXX\n$a\n$(printf "%-.55s" $(tail -1 /run/f.txt))\nXXX\n"; done | dialog --gauge 'Progress' 8 60
                    ( tar c --one-file-system /  | pv -n -s $(du -sbx  /| awk '{print $1}')| tar x -v >/run/f.txt) 2>&1 | while read a; do printf "XXX\n$a\n$(printf "%-.55s" $(tail -1 /run/f.txt))\nXXX\n"; done | dialog --gauge 'Progress' 8 60
                    ;;
                *)
                    ;;
            esac

            # update /boot
            case $tt in
                nfs)
                    sed -i 's%iface eth0 inet dhcp%iface eth0 inet manual%' $tm/etc/network/interfaces

                    cmd=$(tr " " "\n" < /boot/cmdline.txt | grep -v 'rootfstype=\|root=\|rootflags=\|nfsroot=')
                    cmd="root=/dev/nfs nfsroot=$DEST,wsize=2048,rsize=2048,tcp,vers=3 rootfstype=nfs ip=dhcp $cmd "
                    mv /boot/cmdline.txt /boot/cmdline.txt.nfs
                    echo "$cmd" > /boot/cmdline.txt
                    ;;
                *)
                    ;;
            esac

        fi
}

# Executes the command line version of this module
#  $1 Argument [String]
# status | start source destination [fs label] [[size]]
#  (for size, human readable symbols are accepted (800M, 1G, 1T...)
#
# status return code
# 1 ready
# 0 running
# -1 failed
# -2 not started
# 
# start return code
# number - pid of started backup process
# -1 failed
# -3 already running 

function showCMDFn() {
    case $1 in
        start)
            [ "$(xbian-config xbiancopy status)" -eq 0 ] && { echo "-3"; exit 0; }
            [ $# -lt 3 ] && { echo "-1"; exit 5; }
            # [ -n "$4" ] && lab="--label  
            [ -n "$5" ] && size="--size"
            echo "$3" | grep -q ^'file:' && opt_img='--img'
            dest="$3" && dest=${dest##'file:'}
            echo dest=\"$dest\" > /run/xbiancopy.tmp; . /run/xbiancopy.tmp; rm /run/xbiancopy.tmp
            nice -n +1 /usr/sbin/btrfs-auto-snapshot xbiancopy $size $5 $opt_img $2 $dest  > /dev/null 2>&1 & pid=$!
            echo $pid > /tmp/xbiancopy.running
            echo $pid
            ;;
        status)
            [ -e /tmp/xbiancopy.running ] || { echo "-2"; exit 0; }
            if [ -e /tmp/xbiancopy.running.$(cat /tmp/xbiancopy.running) ]; then
                rm -f "/tmp/xbiancopy.running.$(cat /tmp/xbiancopy.running)"
                rm -f /tmp/xbiancopy.running
                echo "1"
            else
                kill -0 $(cat /tmp/xbiancopy.running) > /dev/null 2>&1 || { echo "-1"; rm -f /tmp/xbiancopy.running; exit 0; }
                echo "0"
            fi
            ;;
        imgplan)
            echo $(backupImgPlanFn $2)
            ;;
        imgtype)
            echo $(backupImgTypeFn $2)
            ;;
        imgdest)
            echo $(backupImgDestFn $2)
            ;;
        getpart)
            echo $(getImgPartitionsFn)
            ;;
        dodaily)
            echo $(dailySnapFn $2)
            ;;
        doweekly)
            echo $(weeklySnapFn $2)
            ;;
        domonthly)
            echo $(monthlySnapFn $2)
            ;;
    esac

    exit 0
}
